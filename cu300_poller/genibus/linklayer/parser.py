#!/usr/bin/env python
# -*- coding: utf-8 -*-

__version__ = "0.1.0"

__copyright__ = """
Grundfos GENIBus Library.

(C) 2007-2017 by Christoph Schueler <github.com/Christoph2,
                                     cpu12.gems@googlemail.com>

 All Rights Reserved

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
"""


from collections import namedtuple
import logging

import genibus.gbdefs as defs
import genibus.utils.crc as crc

logger = logging.getLogger("GeniControl")

## dissecting states.
APDU_HEADER0    = 0
APDU_HEADER1    = 1
APDU_DATA       = 2

APDU = namedtuple('APDU', 'klass ack data')
ParseResult = namedtuple('ParseResult', 'sd da sa APDUs')

class ADPUClassNotSupportedError(Exception): pass
class FramingError(Exception): pass

def parse(frame):
#    arr = tuple([ord(x) for x in frame])
    arr = frame

    crc.check_tel(frame)
    sd = arr[defs.START_DELIMITER]
    length = arr[defs.LENGTH]
    da = arr[defs.DESTINATION_ADRESS]
    sa = arr[defs.SOURCE_ADDRESS]

    dissectingState = APDU_HEADER0
    byteCount = 0
    result = []

    if not (length == len(arr) - 4):
        raise FramingError("Frame length doesn't match length byte.")
    for idx in range(defs.PDU_START, length + 2):
        ch = arr[idx]
        if dissectingState == APDU_HEADER0:
            klass = ch & 0x0f
            if klass not in defs.ADPUClass.__members__.values():
                raise ADPUClassNotSupportedError("APDU class '%u' not supported by GeniControl." % klass)
            dissectingState = APDU_HEADER1
            data = []
        elif dissectingState == APDU_HEADER1:
            numberOfDataBytes = ch & 0x3F
            opAck = (ch & 0xC0) >> 6
            byteCount = numberOfDataBytes
            if byteCount:
                dissectingState = APDU_DATA
            else:
                dissectingState = APDU_HEADER0
                result.append(APDU(klass, opAck, data))
        elif dissectingState == APDU_DATA:
            byteCount -= 1
            data.append(ch)
            if byteCount <= 0:
                dissectingState = APDU_HEADER0
                result.append(APDU(klass, opAck, data))
    return ParseResult(defs.FrameType(sd), da, sa, result)



def dissectPumpStatus(dp, value):
    result = []
    if dp == 'act_mode1':
        operationMode = (value & 0x7)
        controlMode = (value & 0x38) >> 3
        nightReduction = (value & 0x40) >> 6

        result.append(('nightReduction', nightReduction, ))
        if operationMode == 0x00:
            om = 'Start'
        elif operationMode == 0x01:
            om = 'Stop'
        elif operationMode == 0x02:
            om = 'Min'
        elif operationMode == 0x03:
            om = 'Max'
        else:
            logger.info('FIX-ME: operationMode "%u"' % operationMode)

        result.append(('operationMode', om, ))

        if controlMode == 0x00:
            cm = 'Constant Pressure'
        elif controlMode == 0x01:
            cm = 'Proportional Pressure'
        elif controlMode == 0x02:
            cm = 'Constant Frequency'
        elif controlMode == 0x05:
            cm = 'Automatic Setpoint'
        result.append(('controlMode', cm, ))
    elif dp == 'act_mode2':
        temperatureInfluence = value & 0x01
        buttonsOnPump = (value & 0x20) >> 5
        minimumCurve = (value & 0xc0) >> 6
        result.append(('temperatureInfluence', temperatureInfluence))
        result.append(('buttonsOnPump', buttonsOnPump))
        result.append(('minimumCurve', minimumCurve))
    elif dp == 'act_mode3':
        sm = value & 0x07
        if sm == 0:
            systemMode = 'Normal'
        elif sm == 3:
            systemMode = 'Survive'
        elif sm == 4:
            systemMode = 'Alarm Standby'
        else:
            systemMode = '???'
        result.append(('systemMode', systemMode))
        pendingAlarm = (value & 0x08) >> 3
        result.append(('pendingAlarm', pendingAlarm))
        sm = (value & 0x10) >> 4
        sourceMode = 'Local' if sm == 1 else 'Remote'
        result.append(('sourceMode', sourceMode))
    elif dp == 'contr_source':
        cs = (value & 0x0f) >> 4
        if cs == 0b0001:
            contrSource = "Buttons"
        elif cs == 0b0010:
            contrSource = "GENIBus"
        elif cs == 0b0011:
            contrSource = "GENILink"
        elif cs == 0b0100:
            contrSource = "External control"
        else:
            contrSource = 'Buttons' # ???
        result.append(('activeSource', contrSource))
    return result


FRAMES = (
# TX
    (0x27, 0x12, 0x20, 0x04, 0x02, 0x0e, 0x23, 0x25, 0x27, 0x22, 0x20, 0x51, 0x52, 0x53, 0x2f, 0x5a, 0x98, 0x99, 0x18, 0x19, 0x61, 0x5b),
    (0x27, 0x0c, 0x20, 0x04, 0x04, 0x08, 0x2e, 0x2f, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0xf0, 0x42),
    (0x27, 0x13, 0x20, 0x04, 0x02, 0xcf, 0xa6, 0x59, 0x42, 0x43, 0x4d, 0x9e, 0x61, 0x4e, 0x4b, 0x23, 0x29, 0x47, 0x4a, 0xa2, 0x5a, 0xef, 0xe4),
    (0x27, 0x13, 0x20, 0x04, 0x02, 0xcf, 0x1d, 0x1e, 0x1f, 0x94, 0x98, 0x46, 0x1c, 0x95, 0x99, 0x3d, 0x49, 0x1b, 0x25, 0x41, 0x40, 0x2d, 0x19),
    (0x27, 0x13, 0x20, 0x04, 0x02, 0xcf, 0x3a, 0x4c, 0xa0, 0xa1, 0x20, 0x57, 0x48, 0x2c, 0xa3, 0x93, 0x4f, 0x3e, 0x44, 0x30, 0x5d, 0x4f, 0x2a),
    (0x27, 0x13, 0x20, 0x04, 0x02, 0xcf, 0x2b, 0x60, 0x31, 0x2e, 0x53, 0x52, 0x51, 0x9b, 0x96, 0x50, 0x55, 0x2f, 0x27, 0x22, 0x45, 0xdc, 0x19),
    (0x27, 0x0a, 0x20, 0x04, 0x02, 0xc6, 0x19, 0x9f, 0x28, 0x1a, 0x2a, 0x18, 0x89, 0x97),
    (0x27, 0x0c, 0x20, 0x04, 0x04, 0xc8, 0x4a, 0x55, 0x2f, 0x56, 0x2e, 0x54, 0x53, 0x57, 0x38, 0x86),
    (0x27, 0x07, 0x20, 0x04, 0x05, 0xc3, 0x01, 0x13, 0x02, 0x2b, 0xf3),
    (0x27, 0x0e, 0xfe, 0x01, 0x00, 0x02, 0x02, 0x03, 0x04, 0x02, 0x2e, 0x2f, 0x02, 0x02, 0x94, 0x95, 0xa2, 0xaa),

# RX
    (0x24, 0x12, 0x04, 0x20, 0x02, 0x0e, 0x09, 0x26, 0x03, 0x1a, 0x5c, 0x00, 0x00, 0x10, 0x01, 0x1e, 0x00, 0x09, 0x01, 0x96, 0x3b, 0xac),
    (0x24, 0x0c, 0x04, 0x20, 0x04, 0x08, 0x20, 0xf7, 0xff, 0x0d, 0x46, 0x0d, 0x46, 0xff, 0x70, 0xdf),
    (0x24, 0x1f, 0x04, 0x20, 0x02, 0x1b, 0xa0, 0xa1, 0xa0, 0x80, 0x82, 0x1e, 0x00, 0x64, 0xa0, 0x80, 0x80, 0x80, 0x83, 0x62, 0x00, 0x00, 0x82, 0x09, 0x00, 0x28, 0x80, 0x82, 0x19, 0x00, 0x14, 0x80, 0xa1, 0x18, 0x30),
    (0x24, 0x28, 0x04, 0x20, 0x02, 0x24, 0x83, 0x15, 0x00, 0x00, 0x82, 0x01, 0x00, 0x78, 0x80, 0x80, 0x82, 0x28, 0x00, 0xfe, 0x80, 0x83, 0x15, 0x00, 0x00, 0x80, 0xb0, 0x82, 0x1e, 0x00, 0x64, 0x80, 0x82, 0x68, 0x00, 0xfe, 0x82, 0x19, 0x00, 0x14, 0x80, 0xa0, 0xfc, 0x36),
    (0x24, 0x25, 0x04, 0x20, 0x02, 0x21, 0x82, 0x15, 0x00, 0xfe, 0x82, 0x1e, 0x00, 0x64, 0x80, 0x80, 0x82, 0x26, 0x00, 0x6e, 0x80, 0x80, 0x82, 0x19, 0x00, 0xfe, 0xa0, 0x80, 0x80, 0x82, 0x19, 0x00, 0x14, 0xa0, 0x82, 0x1e, 0x00, 0x64, 0x80, 0x0d, 0xbf),
    (0x24, 0x1f, 0x04, 0x20, 0x02, 0x1b, 0x82, 0x17, 0x00, 0xfe, 0x80, 0x82, 0x19, 0x00, 0x14, 0x80, 0xa1, 0xa1, 0xa1, 0x80, 0x80, 0x80, 0xa1, 0x80, 0x82, 0x17, 0x00, 0x64, 0x82, 0x09, 0x00, 0x03, 0x80, 0xef, 0xf1),
    (0x24, 0x13, 0x04, 0x20, 0x02, 0x0f, 0xb0, 0x80, 0x82, 0x19, 0x00, 0x14, 0x80, 0x82, 0x17, 0x00, 0xfe, 0x82, 0x27, 0x00, 0x7f, 0x8f, 0x4f),
    (0x24, 0x18, 0x04, 0x20, 0x04, 0x14, 0x80, 0x82, 0x1e, 0x00, 0x64, 0x80, 0x82, 0x1e, 0x00, 0x64, 0x80, 0x82, 0x1e, 0x00, 0x64, 0x82, 0x1e, 0x00, 0x64, 0x80, 0xb6, 0x8e),
    (0x24, 0x0d, 0x04, 0x20, 0x05, 0x09, 0x82, 0x1e, 0x00, 0x64, 0x80, 0x82, 0x1e, 0x00, 0x64, 0x19, 0x3e),
    (0x24, 0x0e, 0x01, 0x20, 0x00, 0x02, 0x46, 0xce, 0x04, 0x02, 0x20, 0xf7, 0x02, 0x02, 0x01, 0x0a, 0x37, 0x66),
)

for frame in FRAMES:
    result = parse(frame)
    print(result)

    ## TODO: rename to parser.py
def main():
    pass

if __name__ == '__main__':
    main()

